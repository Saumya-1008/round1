import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

public class DestinationHashGenerator {

    public static void main(String[] args) {
        if (args.length != 2) {
            System.err.println("Usage: java -jar DestinationHashGenerator.jar <Roll Number> <JSON File Path>");
            System.exit(1);
        }

        String rollNumber = args[0].toLowerCase().trim();
        String filePath = args[1];
        String destinationValue;

        try {
            destinationValue = findDestinationValue(filePath);
            if (destinationValue == null) {
                System.err.println("Error: Key 'destination' not found in the JSON file.");
                System.exit(1);
            }

            String randomString = generateRandomString(8);
            String concatenated = rollNumber + destinationValue + randomString;
            String hash = generateMD5Hash(concatenated);

            System.out.println(hash + ";" + randomString);
        } catch (IOException e) {
            System.err.println("Error reading JSON file: " + e.getMessage());
            System.exit(1);
        } catch (NoSuchAlgorithmException e) {
            System.err.println("Error generating MD5 hash: " + e.getMessage());
            System.exit(1);
        }
 }

    private static String findDestinationValue(String filePath) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = mapper.readTree(new File(filePath));

        return traverseJson(rootNode);
    }

    private static String traverseJson(JsonNode node) {
        if (node.isObject()) {
            for (JsonNode child : node) {
                if (child.has("destination")) {
                    return child.get("destination").asText();
                }
                String result = traverseJson(child);
                if (result != null) return result;
            }
        } else if (node.isArray()) {
            for (JsonNode child : node) {
                String result = traverseJson(child);
                if (result != null) return result;
            }
        }
        return null;
    }

    private static String generateRandomString(int length) {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder sb = new StringBuilder(length);

        for (int i = 0; i < length; i++) {
            sb.append(chars.charAt(random.nextInt(chars.length())));
        }

        return sb.toString();
    }

    private static String generateMD5Hash(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
 byte[] hashBytes = md.digest(input.getBytes());
        StringBuilder sb = new StringBuilder();

        for (byte b : hashBytes) {
            sb.append(String.format("%02x", b));
        }

        return sb.toString();
    }
}
